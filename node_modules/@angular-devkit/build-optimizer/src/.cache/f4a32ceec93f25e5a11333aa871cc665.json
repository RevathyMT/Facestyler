{"remainingRequest":"D:\\angular_practices\\angdash_clone_prod\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!D:\\angular_practices\\angdash_clone_prod\\node_modules\\ack-angular-webcam\\AckMediaDevices.directive.js","dependencies":[{"path":"D:\\angular_practices\\angdash_clone_prod\\node_modules\\ack-angular-webcam\\AckMediaDevices.directive.js","mtime":1524303515682},{"path":"D:\\angular_practices\\angdash_clone_prod\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1523268819553},{"path":"D:\\angular_practices\\angdash_clone_prod\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar core_1 = require(\"@angular/core\");\nvar videoHelp_1 = require(\"./videoHelp\");\nvar AckMediaDevices = /*@__PURE__*/ (function () {\n    function AckMediaDevices() {\n        this.array = [];\n        this.arrayChange = new core_1.EventEmitter();\n        this.errorChange = new core_1.EventEmitter();\n        this.catcher = new core_1.EventEmitter();\n        this.videoInputsChange = new core_1.EventEmitter();\n        this.audioInputsChange = new core_1.EventEmitter();\n        this.audioOutputsChange = new core_1.EventEmitter();\n    }\n    AckMediaDevices.prototype.ngOnInit = function () {\n        this.loadDevices();\n    };\n    AckMediaDevices.prototype.loadDevices = function () {\n        var _this = this;\n        return videoHelp_1.promiseDevices()\n            .then(function (devices) { return _this.onDevices(devices) && devices; })\n            .catch(function (e) {\n            _this.catcher.emit(e);\n            _this.errorChange.emit(_this.error = e);\n            return Promise.reject(e);\n        });\n    };\n    AckMediaDevices.prototype.onDevices = function (devices) {\n        this.arrayChange.emit(this.array = devices);\n        if (this.audioInputsChange.observers.length) {\n            this.audioInputs = videoHelp_1.audioInputsByDevices(devices);\n            this.audioInputsChange.emit(this.audioInputs);\n        }\n        if (this.audioOutputsChange.observers.length) {\n            this.audioOutputs = videoHelp_1.audioOutputsByDevices(devices);\n            this.audioOutputsChange.emit(this.audioOutputs);\n        }\n        if (this.videoInputsChange.observers.length) {\n            this.videoInputs = videoHelp_1.videoInputsByDevices(devices);\n            this.videoInputsChange.emit(this.videoInputs);\n        }\n        return this;\n    };\n    AckMediaDevices.decorators = [\n        { type: core_1.Directive, args: [{\n                    selector: 'ack-media-devices'\n                },] },\n    ];\n    AckMediaDevices.propDecorators = {\n        \"array\": [{ type: core_1.Input },],\n        \"arrayChange\": [{ type: core_1.Output },],\n        \"error\": [{ type: core_1.Input },],\n        \"errorChange\": [{ type: core_1.Output },],\n        \"catcher\": [{ type: core_1.Output, args: ['catch',] },],\n        \"videoInputs\": [{ type: core_1.Input },],\n        \"videoInputsChange\": [{ type: core_1.Output },],\n        \"audioInputs\": [{ type: core_1.Input },],\n        \"audioInputsChange\": [{ type: core_1.Output },],\n        \"audioOutputs\": [{ type: core_1.Input },],\n        \"audioOutputsChange\": [{ type: core_1.Output },],\n    };\n    return AckMediaDevices;\n}());\nexports.AckMediaDevices = AckMediaDevices;\n",null]}