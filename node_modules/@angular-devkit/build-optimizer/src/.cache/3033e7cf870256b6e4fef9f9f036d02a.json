{"remainingRequest":"D:\\FaceStyler\\Angular 5\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!D:\\FaceStyler\\Angular 5\\node_modules\\ack-angular-webcam\\videoHelp.js","dependencies":[{"path":"D:\\FaceStyler\\Angular 5\\node_modules\\ack-angular-webcam\\videoHelp.js","mtime":1526272989742},{"path":"D:\\FaceStyler\\Angular 5\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1526273107412},{"path":"D:\\FaceStyler\\Angular 5\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1526272959702}],"contextDependencies":[],"result":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar core_1 = require(\"@angular/core\");\r\nexports.browser = navigator;\r\nfunction getMedia() {\r\n    return exports.browser.getUserMedia\r\n        || exports.browser.webkitGetUserMedia\r\n        || exports.browser.mozGetUserMedia\r\n        || exports.browser.msGetUserMedia;\r\n}\r\nexports.getMedia = getMedia;\r\n/*\r\nexport interface MediaDevice{\r\n  deviceId: string\r\n  kind: \"videoinput\" | \"audioinput\" | string\r\n  label: string\r\n  groupId: string\r\n}*/\r\nfunction dataUriToBlob(dataURI) {\r\n    // convert base64/URLEncoded data component to raw binary data held in a string\r\n    var byteString;\r\n    if (dataURI.split(',')[0].indexOf('base64') >= 0) {\r\n        byteString = atob(dataURI.split(',')[1]);\r\n    }\r\n    else {\r\n        byteString = window['unescape'](dataURI.split(',')[1]);\r\n    }\r\n    // separate out the mime component\r\n    var mimeString = dataURI.split(',')[0].split(':')[1].split(';')[0];\r\n    // write the bytes of the string to a typed array\r\n    var ia = new Uint8Array(byteString.length);\r\n    for (var i = 0; i < byteString.length; i++) {\r\n        ia[i] = byteString.charCodeAt(i);\r\n    }\r\n    return new Blob([ia], { type: mimeString });\r\n}\r\nexports.dataUriToBlob = dataUriToBlob;\r\n/** single image to transmittable resource */\r\nfunction dataUriToFormData(dataURI, options) {\r\n    options = options || {};\r\n    options.form = options.form || new FormData();\r\n    options.form.append('file', dataUriToBlob(dataURI), options.fileName || 'file.jpg');\r\n    return options.form;\r\n}\r\nexports.dataUriToFormData = dataUriToFormData;\r\nfunction drawImageArrayToCanvas(imgArray) {\r\n    var canvas = document.createElement('canvas');\r\n    // const di = this.getVideoDimensions()\r\n    var ctx = canvas.getContext('2d');\r\n    var width = imgArray[0].split(';').length;\r\n    var height = imgArray.length;\r\n    canvas.width = width;\r\n    canvas.height = height;\r\n    ctx.clearRect(0, 0, width, height);\r\n    var externData = {\r\n        imgData: ctx.getImageData(0, 0, width, height),\r\n        pos: 0\r\n    };\r\n    var tmp = null;\r\n    for (var x = 0; x < imgArray.length; ++x) {\r\n        var col = imgArray[x].split(';');\r\n        for (var i = 0; i < width; i++) {\r\n            tmp = parseInt(col[i], 10);\r\n            externData.imgData.data[externData.pos + 0] = (tmp >> 16) & 0xff;\r\n            externData.imgData.data[externData.pos + 1] = (tmp >> 8) & 0xff;\r\n            externData.imgData.data[externData.pos + 2] = tmp & 0xff;\r\n            externData.imgData.data[externData.pos + 3] = 0xff;\r\n            externData.pos += 4;\r\n        }\r\n        /*if (externData.pos >= 4 * width * height) {\r\n              ctx.putImageData(externData.imgData, 0, 0);\r\n              externData.pos = 0;\r\n            }*/\r\n    }\r\n    ctx.putImageData(externData.imgData, 0, 0);\r\n    return canvas;\r\n}\r\nexports.drawImageArrayToCanvas = drawImageArrayToCanvas;\r\nvar Fallback = /*@__PURE__*/ (function () {\r\n    function Fallback(videoObject) {\r\n        var _this = this;\r\n        this.onImage = new core_1.EventEmitter();\r\n        this.videoObject = videoObject;\r\n        var dataImgArray = [];\r\n        //method intended to live within window memory\r\n        this.debug = function (tag, message) {\r\n            if (tag == 'notify' && message == 'Capturing finished.') {\r\n                _this.onImage.emit(drawImageArrayToCanvas(dataImgArray));\r\n            }\r\n        };\r\n        //method intended to live within window memory\r\n        this.onCapture = function () {\r\n            dataImgArray.length = 0;\r\n            videoObject.save();\r\n        };\r\n        //method intended to live within window memory\r\n        this.onSave = function (data) {\r\n            dataImgArray.push(data);\r\n        };\r\n        //Flash swf file expects window.webcam to exist as communication bridge\r\n        window['webcam'] = this;\r\n    }\r\n    Fallback.prototype.captureToCanvas = function () {\r\n        var _this = this;\r\n        return new Promise(function (res, rej) {\r\n            var subscription = _this.onImage.subscribe(function (img) {\r\n                res(img);\r\n                subscription.unsubscribe();\r\n            });\r\n            _this.videoObject.capture();\r\n        });\r\n    };\r\n    Fallback.prototype.captureBase64 = function (mime) {\r\n        return this.captureToCanvas()\r\n            .then(function (canvas) { return canvas.toDataURL(mime || 'image/jpeg'); });\r\n    };\r\n    /**\r\n     * Add <param>'s into fallback object\r\n     * @param cam - Flash web camera instance\r\n     * @returns {void}\r\n     */\r\n    /**\r\n       * Add <param>'s into fallback object\r\n       * @param cam - Flash web camera instance\r\n       * @returns {void}\r\n       */\r\n    Fallback.prototype.addFallbackParams = /**\r\n       * Add <param>'s into fallback object\r\n       * @param cam - Flash web camera instance\r\n       * @returns {void}\r\n       */\r\n        function (options) {\r\n            var paramFlashVars = document.createElement('param');\r\n            paramFlashVars.name = 'FlashVars';\r\n            paramFlashVars.value = 'mode=' + options.fallbackMode + '&amp;quality=' + options.fallbackQuality;\r\n            this.videoObject.appendChild(paramFlashVars);\r\n            var paramAllowScriptAccess = document.createElement('param');\r\n            paramAllowScriptAccess.name = 'allowScriptAccess';\r\n            paramAllowScriptAccess.value = 'always';\r\n            this.videoObject.appendChild(paramAllowScriptAccess);\r\n            //is this even needed?\r\n            this.videoObject.classid = 'clsid:D27CDB6E-AE6D-11cf-96B8-444553540000';\r\n            var paramMovie = document.createElement('param');\r\n            paramMovie.name = 'movie';\r\n            paramMovie.value = options.fallbackSrc;\r\n            this.videoObject.appendChild(paramMovie);\r\n            this.videoObject.data = options.fallbackSrc;\r\n        };\r\n    return Fallback;\r\n}());\r\nexports.Fallback = Fallback;\r\nfunction videoInputsByDevices(devices) {\r\n    return devicesByKind(devices, 'videoinput');\r\n}\r\nexports.videoInputsByDevices = videoInputsByDevices;\r\nfunction audioInputsByDevices(devices) {\r\n    return devicesByKind(devices, 'audioinput');\r\n}\r\nexports.audioInputsByDevices = audioInputsByDevices;\r\nfunction audioOutputsByDevices(devices) {\r\n    return devicesByKind(devices, 'audiooutput');\r\n}\r\nexports.audioOutputsByDevices = audioOutputsByDevices;\r\nfunction devicesByKind(devices, kind) {\r\n    return devices.filter(function (device) { return device.kind === kind; });\r\n}\r\nexports.devicesByKind = devicesByKind;\r\nfunction promiseDeviceById(id) {\r\n    return promiseDevices().then(function (devices) { return devices.find(function (device) { return device.deviceId == id; }); });\r\n}\r\nexports.promiseDeviceById = promiseDeviceById;\r\nfunction promiseDevices() {\r\n    //const x:Promise<MediaDeviceInfo[]> = browser.mediaDevices.enumerateDevices().then( devices=>devices )\r\n    return exports.browser.mediaDevices.enumerateDevices();\r\n}\r\nexports.promiseDevices = promiseDevices;\r\nfunction isFacingModeSupported() {\r\n    if (!exports.browser.mediaDevices)\r\n        return false;\r\n    var contraints = exports.browser.mediaDevices.getSupportedConstraints();\r\n    return contraints.facingMode;\r\n}\r\nexports.isFacingModeSupported = isFacingModeSupported;\r\n",null]}